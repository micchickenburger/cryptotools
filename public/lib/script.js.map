{
  "version": 3,
  "sources": ["../../src/index.ts"],
  "sourcesContent": ["const loader = document.querySelector<HTMLElement>('#loader');\nconst load = (pct: number) => {\n  if (loader) loader.style.width = `${pct}%`;\n};\n\nconst showResult = (value: string) => {\n  load(100);\n  const result = document.querySelector<HTMLElement>('#result');\n  if (result) {\n    const content = result.querySelector('.content');\n    if (content) content.textContent = value;\n    setCopyText();\n    result.style.opacity = '100%';\n  }\n};\n\nconst setCopyText = (value: string = 'Copy') => {\n  const copyText = document.querySelector('#result .copy span');\n  if (copyText) copyText.textContent = value;\n};\n\nconst copyAnchor = document.querySelector('#result > a.copy');\ncopyAnchor?.addEventListener('click', async (event) => {\n  event.preventDefault();\n  const parent = (event.currentTarget as HTMLElement).parentElement;\n  const content = parent?.querySelector('.content')?.textContent;\n  if (content) {\n    try {\n      await navigator.clipboard.writeText(content);\n      setCopyText('Copied!');\n    } catch (e) {\n      setCopyText('Error: You will have to copy manually :(');\n    }\n  }\n});\n\nasync function digestMessage(message: string) {\n  const msgUint8 = new TextEncoder().encode(message); // encode as (utf-8) Uint8Array\n  const hashBuffer = await crypto.subtle.digest('SHA-256', msgUint8); // hash the message\n  const hashArray = Array.from(new Uint8Array(hashBuffer)); // convert buffer to byte array\n  const hashHex = hashArray\n    .map((b) => b.toString(16).padStart(2, '0'))\n    .join(''); // convert bytes to hex string\n  return hashHex;\n}\n\nconst button = document.querySelector('button');\nbutton?.addEventListener('click', () => {\n  load(0);\n  const text = document.querySelector('textarea')?.value;\n  if (text) digestMessage(text).then((digestHex) => {\n    showResult(digestHex);\n  });\n});\n"],
  "mappings": "8RAAA,IAAAA,EAAAC,EAAAC,GAAA,KAAMC,EAAS,SAAS,cAA2B,SAAS,EACtDC,EAAQC,GAAgB,CACxBF,IAAQA,EAAO,MAAM,MAAQ,GAAGE,CAAG,IACzC,EAEMC,EAAcC,GAAkB,CACpCH,EAAK,GAAG,EACR,IAAMI,EAAS,SAAS,cAA2B,SAAS,EAC5D,GAAIA,EAAQ,CACV,IAAMC,EAAUD,EAAO,cAAc,UAAU,EAC3CC,IAASA,EAAQ,YAAcF,GACnCG,EAAY,EACZF,EAAO,MAAM,QAAU,MACzB,CACF,EAEME,EAAc,CAACH,EAAgB,SAAW,CAC9C,IAAMI,EAAW,SAAS,cAAc,oBAAoB,EACxDA,IAAUA,EAAS,YAAcJ,EACvC,EAEMK,EAAa,SAAS,cAAc,kBAAkB,EAC5DA,GAAA,MAAAA,EAAY,iBAAiB,QAAgBC,GAAUC,EAAAZ,EAAA,iBAtBvD,IAAAa,EAuBEF,EAAM,eAAe,EACrB,IAAMG,EAAUH,EAAM,cAA8B,cAC9CJ,GAAUM,EAAAC,GAAA,YAAAA,EAAQ,cAAc,cAAtB,YAAAD,EAAmC,YACnD,GAAIN,EACF,GAAI,CACF,MAAM,UAAU,UAAU,UAAUA,CAAO,EAC3CC,EAAY,SAAS,CACvB,OAASO,EAAG,CACVP,EAAY,0CAA0C,CACxD,CAEJ,IAEA,SAAeQ,EAAcC,EAAiB,QAAAL,EAAA,sBAC5C,IAAMM,EAAW,IAAI,YAAY,EAAE,OAAOD,CAAO,EAC3CE,EAAa,MAAM,OAAO,OAAO,OAAO,UAAWD,CAAQ,EAKjE,OAJkB,MAAM,KAAK,IAAI,WAAWC,CAAU,CAAC,EAEpD,IAAKC,GAAMA,EAAE,SAAS,EAAE,EAAE,SAAS,EAAG,GAAG,CAAC,EAC1C,KAAK,EAAE,CAEZ,GAEA,IAAMC,EAAS,SAAS,cAAc,QAAQ,EAC9CA,GAAA,MAAAA,EAAQ,iBAAiB,QAAS,IAAM,CA/CxC,IAAAR,EAgDEX,EAAK,CAAC,EACN,IAAMoB,GAAOT,EAAA,SAAS,cAAc,UAAU,IAAjC,YAAAA,EAAoC,MAC7CS,GAAMN,EAAcM,CAAI,EAAE,KAAMC,GAAc,CAChDnB,EAAWmB,CAAS,CACtB,CAAC,CACH",
  "names": ["require_src", "__commonJSMin", "exports", "loader", "load", "pct", "showResult", "value", "result", "content", "setCopyText", "copyText", "copyAnchor", "event", "__async", "_a", "parent", "e", "digestMessage", "message", "msgUint8", "hashBuffer", "b", "button", "text", "digestHex"]
}
