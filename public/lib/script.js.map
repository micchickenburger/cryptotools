{
  "version": 3,
  "sources": ["../../src/index.ts"],
  "sourcesContent": ["/**\n * Loader logic\n */\nconst loader = document.querySelector<HTMLElement>('#loader');\nconst load = (pct: number) => {\n  if (loader) loader.style.width = `${pct}%`;\n};\n\n/**\n * Main Menu\n */\nconst menuItems = document.querySelectorAll('#main-menu li') as unknown as HTMLElement[];\nconst sections = document.querySelectorAll('main section') as unknown as HTMLElement[];\nmenuItems.forEach((item) => item.addEventListener('click', (event) => {\n  menuItems.forEach(i => i.classList.remove('active'));\n  sections.forEach(i => i.classList.remove('active'));\n  item.classList.add('active');\n  if (item.dataset.target) document.querySelector(item.dataset.target)?.classList.add('active');\n}));\n\n/**\n * Digest Logic\n */\n\nconst showResult = (value: string) => {\n  load(100);\n  const result = document.querySelector<HTMLElement>('#digest .result');\n  if (result) {\n    const content = result.querySelector('.content');\n    if (content) content.textContent = value;\n    setCopyText();\n    result.style.opacity = '100%';\n  }\n};\n\nconst hideResult = () => {\n  const result = document.querySelector<HTMLElement>('#digest .result');\n  if (result) result.style.opacity = '0';\n};\n\nconst setCopyText = (value: string = 'Copy') => {\n  const copyText = document.querySelector('#digest .result .copy span');\n  if (copyText) copyText.textContent = value;\n};\n\nconst copyAnchor = document.querySelector('#digest .result > a.copy');\ncopyAnchor?.addEventListener('click', async (event) => {\n  event.preventDefault();\n  const parent = (event.currentTarget as HTMLElement).parentElement;\n  const content = parent?.querySelector('.content')?.textContent;\n  if (content) {\n    try {\n      await navigator.clipboard.writeText(content);\n      setCopyText('Copied!');\n    } catch (e) {\n      setCopyText('Error: You will have to copy manually :(');\n    }\n  }\n});\n\n/**\n * Character count\n */\nconst input = document.querySelector('textarea');\ninput?.addEventListener('input', () => {\n  const characterCount = document.querySelector('#digest .character-count');\n  if (characterCount) {\n    const count = input.value.length;\n    if (count === 1) characterCount.textContent = '1 character';\n    else characterCount.textContent = `${count} characters`;\n  }\n});\n\n/**\n * Digest Generation\n */\nasync function digestMessage(message: string, algorithm: string) {\n  const msgUint8 = new TextEncoder().encode(message); // encode as (utf-8) Uint8Array\n  const hashBuffer = await crypto.subtle.digest(algorithm, msgUint8); // hash the message\n  const hashArray = Array.from(new Uint8Array(hashBuffer)); // convert buffer to byte array\n  const hashHex = hashArray\n    .map((b) => b.toString(16).padStart(2, '0'))\n    .join(''); // convert bytes to hex string\n  return hashHex;\n}\n\nconst button = document.querySelector('button');\nbutton?.addEventListener('click', () => {\n  load(0);\n  const text = input?.value;\n  if (text && selected.alg) {\n    digestMessage(text, selected.alg).then((digestHex) => {\n      showResult(digestHex);\n    });\n  }\n});\n\nlet selected: DOMStringMap;\n\nconst digestSelect = document.querySelector('#digest-select') as HTMLSelectElement;\ndigestSelect?.addEventListener('change', (event) => {\n  const menu = document.querySelector('#digest menu');\n  const outputLength = menu?.querySelector('#digest-output-length span');\n  const blockSize = menu?.querySelector('#digest-block-size span');\n  const method = menu?.querySelector('#digest-method span');\n  const specification = menu?.querySelector('#digest-specification span');\n  \n  selected = digestSelect.selectedOptions[0].dataset;\n  if (outputLength) outputLength.textContent = selected.ol || '';\n  if (blockSize) blockSize.textContent = selected.bs || '';\n  if (method) method.textContent = selected.method || '';\n  if (specification) specification.textContent = selected.spec || '';\n\n  hideResult();\n});\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  digestSelect.dispatchEvent(new Event('change'));\n});\n"],
  "mappings": "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",
  "names": ["require_src", "__commonJSMin", "exports", "loader", "load", "pct", "menuItems", "sections", "item", "event", "_a", "i", "showResult", "value", "result", "content", "setCopyText", "hideResult", "copyText", "copyAnchor", "__async", "parent", "e", "input", "characterCount", "count", "digestMessage", "message", "algorithm", "msgUint8", "hashBuffer", "b", "button", "text", "selected", "digestHex", "digestSelect", "menu", "outputLength", "blockSize", "method", "specification"]
}
